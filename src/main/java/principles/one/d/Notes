5. Dependency Inversion Principle

Most of us are already familiar with the words used in principle’s name. DI principle says:

    “Depend on abstractions, not on concretions”

In other words. we should design our software in such a way that various modules can be separated from each
other using an abstract layer to bind them together.

5.1. Dependency Inversion Principle Example

The classical use of this principle of bean configuration in Spring framework.

In spring framework, all modules are provided as separate components
which can work together by simply injected dependencies in other module.
This dependency is managed externally in XML files.

These separate components are so well closed in their boundaries that we can use them in other software modules apart
from spring with same ease. This has been achieved by dependency inversion and open closed principles.
All modules expose only abstraction which is useful in extending the functionality or plug-in in another module.

These were five class design principles, also known as SOLID principles, which makes the best practices to be
followed to design our application classes.