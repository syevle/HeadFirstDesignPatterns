3. Liskov’s Substitution Principle

This principle is a variation of previously discussed open closed principle. It says:

    “Derived types must be completely substitutable for their base types”

It means that the classes fellow developer created by extending our class should be able to fit in application
without failure. This requires the objects of your subclasses to behave in the same way as the objects of your superclass.
This is mostly seen in places where we do run time type identification and then cast it to appropriate reference type.

3.1. Liskov Substitution Principle Example

An example of LSP can be custom property editors in Spring framework.
Spring provides property editors to represent properties in a different way than the object itself
e.g. parsing human readable inputs from HTTP request parameters or displaying human readable values of pure java objects
in view layer e.g. Currency or URL.

Spring can register one property editor for one data type and it is required to follow
the constraint mandated by base class PropertyEditorSupport. So is any class extend PropertyEditorSupport class,
then it can be substituted by everywhere base class is required.

For example, every book has an ISBN number which is in always a fixed display format.
You can have separate representations of ISBN in database and UI. For this requirement,
we may write property editor in such a way –



IsbnEditor.java

import java.beans.PropertyEditorSupport;
import org.springframework.util.StringUtils;
import com.howtodoinjava.app.model.Isbn;

public class IsbnEditor extends PropertyEditorSupport {
    @Override
    public void setAsText(String text) throws IllegalArgumentException {
        if (StringUtils.hasText(text)) {
            setValue(new Isbn(text.trim()));
        } else {
            setValue(null);
        }
    }

    @Override
    public String getAsText() {
        Isbn isbn = (Isbn) getValue();
        if (isbn != null) {
            return isbn.getIsbn();
        } else {
            return "";
        }
    }
}
